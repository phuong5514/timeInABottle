<Page
    x:Class="TimeInABottle.Views.SchedularPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:helpers="using:TimeInABottle.Helpers"
    xmlns:task="using:TimeInABottle.Core.Models.Tasks"
	xmlns:model="using:TimeInABottle.Models"
	xmlns:views="using:TimeInABottle.Views"
    xmlns:xaml="using:Microsoft.UI.Xaml"
    mc:Ignorable="d"
	x:Name="SchedulerPage">

    <Page.Resources>
        <helpers:TimeToGreetingConverter x:Key="TimeToGreetingConverter"/>
        <helpers:TimeToStringConverter x:Key="TimeToStringConverter"/>
        <helpers:TaskToNotificationConverter x:Key="TaskToNotificationConverter"/>
        <helpers:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <helpers:TaskTypeToBooleanConverter x:Key="TaskTypeToBooleanConverter"/>
        <helpers:TaskTypeToIconConverter x:Key="TaskTypeToIconConverter"/>

        <DataTemplate x:Key ="ListItem" x:DataType="model:TaskWrapper">
            <Grid Style="{StaticResource BaseListItemContainerStyleGrid}" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                    <!-- TextBlock fills available space -->
                    <ColumnDefinition Width="Auto"/>
                    <!-- Button only takes as much space as needed -->
                </Grid.ColumnDefinitions>

                <FontIcon
                    Grid.Column="0" 
                    Glyph="{x:Bind Task, Converter={StaticResource TaskTypeToIconConverter}, Mode=OneWay}" 
                    HorizontalAlignment="Left" 
                    VerticalAlignment="Center" 
                    Margin="{StaticResource SmallRightMargin }"/>
                
                <TextBlock 
                    Grid.Column="1" 
                    Style="{StaticResource ListSubTitleStyle}" 
                    VerticalAlignment="Center"
                    Text="{x:Bind Task.Name}"/>

                <Button 
                    Padding="{StaticResource ExSmallPadding}"
                    Grid.Column="2" 
                    Click="RemoveTask_Click"
                    VerticalAlignment="Center">
                    
                    <FontIcon Glyph="&#xE738;"/>
                </Button>
            </Grid>
        </DataTemplate>

        
    </Page.Resources>

    <Grid x:Name="ContentArea">
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup>
				<!-- khi man hinh lon hon = 800 -->
				<VisualState x:Name="WideState">
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="800"/>
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<!-- hien sidebar -->
						<Setter Target="SideBar.Visibility" Value="Visible"/>
						<Setter Target="ColumnDefinitionSideBar.Width" Value="3*"/>
					</VisualState.Setters>
				</VisualState>

				<!-- khi man hinh nho hon 800 -->
				<VisualState x:Name="NarrowState">
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="0"/>
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<!-- an sidebar-->
						<Setter Target="SideBar.Visibility" Value="Collapsed"/>
						<Setter Target="ColumnDefinitionSideBar.Width" Value="0"/>
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>

		<!-- layout chinh -->
		<Grid Padding="20">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="9*"/>
				<ColumnDefinition x:Name="ColumnDefinitionSideBar" Width="3*"/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="3*"/>
				<RowDefinition Height="9*"/>
			</Grid.RowDefinitions>

			<!-- Header: input and task config. -->
            <Grid x:Name="Header" Background="{ThemeResource SolidBackgroundFillColorBaseBrush}" Margin="0,0,16,16" Style="{StaticResource GridBorder}">
                <Grid.ColumnDefinitions>
					<ColumnDefinition Width ="2*"/>
					<ColumnDefinition Width ="2*"/>
					<ColumnDefinition Width ="*"/>
				</Grid.ColumnDefinitions>

                <ScrollView Grid.Column="0" Visibility="{x:Bind ViewModel.IsTaskSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <StackPanel  Orientation="Vertical" Padding="{StaticResource LargePadding}" Spacing="10" >
                        <ComboBox Header ="Difficulty" 
                            HorizontalAlignment="Stretch"	  
                            ItemsSource="{x:Bind model:TaskWrapper.DifficultyValues}" 
                            SelectedItem="{x:Bind ViewModel.EditableTask.DifficultyLevel, Mode=TwoWay}"/>
                        <ComboBox Header ="Urgency" 
                            HorizontalAlignment="Stretch"
                            ItemsSource="{x:Bind model:TaskWrapper.UrgencyValues}" 
                            SelectedItem="{x:Bind ViewModel.EditableTask.UrgencyLevel, Mode=TwoWay}"/>
                        <ComboBox Header ="Importance" 
                            HorizontalAlignment="Stretch"
                            ItemsSource="{x:Bind model:TaskWrapper.ImportanceValues}" 
                            SelectedItem="{x:Bind ViewModel.EditableTask.ImportanceLevel, Mode=TwoWay}"/>
                    </StackPanel>
                </ScrollView>

                <StackPanel Grid.Column="1" Orientation="Vertical" Padding="{StaticResource LargePadding}" Spacing="10" Visibility="{x:Bind ViewModel.IsTaskSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <TimePicker Header="Estimated Completion Time" ClockIdentifier="24HourClock" MinuteIncrement="30" Time="{x:Bind ViewModel.EditableTask.EstimatedCompletionTime, Mode=TwoWay}"/>
                    <CheckBox Content="Set parent as Deadline" IsChecked="{x:Bind ViewModel.EditableTask.ParentAsDeadline, Mode=TwoWay}"/>

					
                </StackPanel>

				<StackPanel Grid.Column="2" Padding="{StaticResource LargePadding}" VerticalAlignment="bottom" Visibility="{x:Bind ViewModel.IsTaskSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
				    <Button  Content="Save Changes" Command="{x:Bind ViewModel.ConfirmChangesCommand}"/>
				</StackPanel>
			
			    <TextBlock Grid.ColumnSpan ="3" Padding="{StaticResource LargePadding}" Visibility="{x:Bind ViewModel.IsTaskNotSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
					Select or add a new task to the schedule queue to edit it's scheduling properties!
				</TextBlock>
            </Grid>

			<!-- SideBar: selected task for scheduling-->
            <Grid x:Name="SideBar"
                  Grid.Column="1"
                  Grid.RowSpan="2"
                  Background="{ThemeResource SolidBackgroundFillColorBaseBrush}"
                  Margin="0,0,0,32"
                  Style="{StaticResource GridBorder}">

                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
				<StackPanel Orientation="Vertical">
					<TextBlock Style="{StaticResource VerticalListTitleStyle}">Schedule settings</TextBlock>
					<CheckBox Content="Only times from now" IsChecked="{x:Bind ViewModel.IsOnlyFromNow, Mode=TwoWay}" HorizontalAlignment="Stretch"/>
                    <CheckBox Content="Keep old derived tasks" IsChecked="{x:Bind ViewModel.PreserveOldTasks, Mode=TwoWay}" HorizontalAlignment="Stretch"/>
                    <Button x:Name="ScheduleButton"
                            Content="Schedule for this week"
                            Click="ScheduleButton_Click"
                            HorizontalAlignment="Stretch"
                            Background="{ThemeResource SystemFillColorSuccessBackgroundBrush}"/>
				</StackPanel>

                <StackPanel Orientation="Vertical" Grid.Row="1">
                    <Border BorderBrush="{ThemeResource SystemControlForegroundBaseLowBrush}" BorderThickness="0,0,0,1" Margin="0,10,0,10" />

                    <TextBlock Style="{StaticResource VerticalListTitleStyle}" Padding="{StaticResource MediumBottomMargin}">Tasks for Scheduling</TextBlock>
                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                        <ListView 
                            Name="TaskList"
                            ItemsSource="{x:Bind ViewModel.TasksForScheduling}"
                            SelectedItem="{x:Bind ViewModel.SelectedTask, Mode=TwoWay}"
                            ItemTemplate="{StaticResource ListItem}"
                            />
                    </ScrollViewer>
                </StackPanel>
            </Grid>

			<!-- CalendarContainer: contains task available for scheduling-->
            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Grid.Row="1" Margin="0,0,16,32" >
                <model:TimeTableView x:Name="CalendarContainer" 
                       Style="{StaticResource TimeTable}"
                       Values="{x:Bind ViewModel.ThisWeekTasks, Mode=OneWay}"
                       TrackTime="True"
                       >
                    <model:TimeTableView.Resources>
                        <DataTemplate x:Key="CalendarTaskItem" x:DataType="task:ITask">
                            <Button 
                                Style="{StaticResource CellContentButton}"
                                Click="CalendarItem_Click"
                                IsEnabled="{Binding Converter={StaticResource TaskTypeToBooleanConverter}}">
                                <StackPanel 
                                    Orientation="Vertical" 
                                    Style="{StaticResource CellContentStackPanel}">     
                                    <TextBlock Style="{StaticResource CalendarTaskItem}">
                                        <Run Text="{x:Bind Name}"/>
                                    </TextBlock>
                                    <TextBlock Style="{StaticResource CalendarTaskItem}">
                                        <Run Text="{x:Bind Start, Converter={StaticResource TimeToStringConverter}}"/> - <Run Text="{x:Bind End, Converter={StaticResource TimeToStringConverter}}"/>
                                    </TextBlock>
                                </StackPanel>
                            </Button>
                        </DataTemplate>
                    </model:TimeTableView.Resources>
                </model:TimeTableView>
                <!---->
            </ScrollViewer>
            <!-- Basic Grid structure, we will add rows and columns in the code-behind -->
        </Grid>
    </Grid>
</Page>
