<Page
    x:Class="TimeInABottle.Views.SchedularPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:helpers="using:TimeInABottle.Helpers"
    xmlns:task="using:TimeInABottle.Core.Models.Tasks"
	xmlns:model="using:TimeInABottle.Models"
	xmlns:views="using:TimeInABottle.Views"
    xmlns:xaml="using:Microsoft.UI.Xaml"
    mc:Ignorable="d">

    <Page.Resources>
        <helpers:TimeToGreetingConverter x:Key="TimeToGreetingConverter"/>
        <helpers:TimeToStringConverter x:Key="TimeToStringConverter"/>
        <helpers:TaskToNotificationConverter x:Key="TaskToNotificationConverter"/>
        <helpers:WeatherInfoWrapperToTemperatureConverter x:Key="WeatherInfoWrapperToTemperatureConverter"/>
        <helpers:WeatherInfoWrapperToWeatherTypeConverter x:Key="WeatherInfoWrapperToWeatherTypeConverter"/>
        <helpers:TaskToSpecialtyStringConverter x:Key="TaskToSpecialtyStringConverter"/>

        <DataTemplate x:Key ="ListItem" x:DataType="task:ITask">
            <StackPanel Orientation="Horizontal" Style="{StaticResource BaseListItemContainerStyle}">
                <TextBlock Style="{StaticResource ListSubTitleStyle}">
                    <Run Text="{x:Bind Start, Converter={StaticResource TimeToStringConverter}}"/>: <Run Text="{x:Bind Name}"/>
                </TextBlock>
            </StackPanel>
        </DataTemplate>

        <!--PointerEntered="CalendarTaskItem_PointerEntered"-->

        <DataTemplate x:Key="CalendarTaskItem" x:DataType="task:ITask">
            <Button Style="{StaticResource CellContentButton}">
                <Button.Background>
                    <AcrylicBrush 
                        TintColor="#03a9fc"
                        TintOpacity="0.6"
                        FallbackColor="#fff"
                        AlwaysUseFallback="False" />
                </Button.Background>
                <StackPanel Orientation="Vertical" Style="{StaticResource CellContentStackPanel}">
                    

                    <TextBlock Style="{StaticResource CalendarTaskItem}">
                        <Run Text="{x:Bind Name}"/>
                    </TextBlock>

                    <TextBlock Style="{StaticResource CalendarTaskItem}">
                        <Run Text="{x:Bind Start, Converter={StaticResource TimeToStringConverter}}"/> - <Run Text="{x:Bind End, Converter={StaticResource TimeToStringConverter}}"/>
                    </TextBlock>
                </StackPanel>
            </Button>
        </DataTemplate>

		<!-- TaskScheduleDetailControl -->
		<DataTemplate x:Key="TaskScheduleDC" x:DataType="model:TaskWrapper">
            <Grid>
                <StackPanel Grid.Column="0" Orientation="Vertical">
                    <ComboBox Width="100" Margin="5" PlaceholderText="Difficulty" 
                        ItemsSource="{x:Bind model:TaskWrapper.DifficultyValues}" 
                        SelectedItem="{x:Bind DifficultyLevel, Mode=TwoWay}"/>
                    <ComboBox Width="100" Margin="5" PlaceholderText="Urgency" 
                        ItemsSource="{x:Bind model:TaskWrapper.UrgencyValues}" 
                        SelectedItem="{x:Bind UrgencyLevel, Mode=TwoWay}"/>
                    <ComboBox Width="100" Margin="5" PlaceholderText="Important" 
                        ItemsSource="{x:Bind model:TaskWrapper.ImportanceValues}" 
                        SelectedItem="{x:Bind ImportanceLevel, Mode=TwoWay}"/>
                </StackPanel>

                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <TimePicker Width="200" Margin="5" Header="Estimated Completion Time" ClockIdentifier="24HourClock" MinuteIncrement="30" Time="{x:Bind EstimatedCompletionTime, Mode=TwoWay}"/>
                    <CheckBox Content="Set as Deadline" IsChecked="{x:Bind ParentAsDeadline, Mode=TwoWay}"/>
                </StackPanel>
            </Grid>
		</DataTemplate>
	
	    <DataTemplate x:Key="TaskScheduleDCEmpty">
			<Grid>
				<TextBlock Text="Select a task for scheduling" Style="{StaticResource SubtitleTextBlockStyle}" /> 
			</Grid>
		</DataTemplate>
    </Page.Resources>

    <Grid x:Name="ContentArea">
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup>
				<!-- khi man hinh lon hon = 800 -->
				<VisualState x:Name="WideState">
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="800"/>
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<!-- hien sidebar -->
						<Setter Target="SideBar.Visibility" Value="Visible"/>
						<Setter Target="ColumnDefinitionSideBar.Width" Value="3*"/>
						<Setter Target="ToggleButton.Visibility" Value="Collapsed"/>
					</VisualState.Setters>
				</VisualState>

				<!-- khi man hinh nho hon 800 -->
				<VisualState x:Name="NarrowState">
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="0"/>
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<!-- an sidebar-->
						<Setter Target="SideBar.Visibility" Value="Collapsed"/>
						<Setter Target="ColumnDefinitionSideBar.Width" Value="0"/>
						<Setter Target="ToggleButton.Visibility" Value="Visible"/>
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>

		<!-- layout chinh -->
		<Grid Padding="20">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="9*"/>
				<ColumnDefinition x:Name="ColumnDefinitionSideBar" Width="3*"/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="2*"/>
				<RowDefinition Height="10*"/>
			</Grid.RowDefinitions>

			<!-- Header: input and task config. -->
            <Grid x:Name="Header" Background="{ThemeResource SolidBackgroundFillColorBaseBrush}" Margin="0,0,16,16" CornerRadius="16">
                <ContentControl
                    x:Name="ConfigDetails"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Content="{x:Bind ViewModel.SelectedTask, Mode=TwoWay}"
                />
            </Grid>

			<!-- SideBar: selected task for scheduling-->
            <StackPanel x:Name="SideBar" Grid.Column="1" Grid.RowSpan="2" Orientation="Vertical" Background="{ThemeResource SolidBackgroundFillColorBaseBrush}" Margin="0,0,0,32" CornerRadius="16">
                <Button x:Name="ScheduleButton" Content="Schedule" Command="{Binding ScheduleSelectedTask}"/>
                <TextBlock Style="{StaticResource VerticalListTitleStyle}">Tasks for Scheduling</TextBlock>
                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                    <ListView 
                        Name="TaskList"
                        ItemsSource="{x:Bind ViewModel.TasksForScheduling}"
                        SelectedItem="{x:Bind ViewModel.SelectedTask, Mode=TwoWay}"
                        ItemTemplate="{StaticResource ListItem}"
                    />
                </ScrollViewer>
            </StackPanel>

			<!-- CalendarContainer: contains task available for scheduling-->
            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Grid.Row="1"  Background="{ThemeResource SolidBackgroundFillColorBaseBrush}" Margin="0,0,16,32" CornerRadius="16">
                <Grid x:Name="CalendarContainer">
                </Grid>
            </ScrollViewer>
            <!-- Basic Grid structure, we will add rows and columns in the code-behind -->
        </Grid>
    </Grid>
</Page>
